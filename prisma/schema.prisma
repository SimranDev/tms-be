// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  firstname   String
  lastname    String
  email       String   @unique
  password    String
  role        Role
  createdAt   DateTime @default(now())
  jobsCreated Job[]    @relation("CreatedJobs")
}

model Customer {
  id            String   @id @default(cuid())
  companyName   String
  contactPerson String
  email         String
  phoneNumber   String
  address       String
  createdAt     DateTime @default(now())
  jobs          Job[]
}

model Driver {
  id                String   @id @default(cuid())
  firstname         String
  lastname          String
  email             String   @unique
  phoneNumber       String   @unique
  password          String
  licenseNumber     String
  licenseExpiryDate DateTime
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  jobs              Job[]
}

model Vehicle {
  id                 String      @id @default(cuid())
  name               String
  licensePlate       String      @unique
  vinNumber          String      @unique
  type               VehicleType
  capacityKg         Int
  registrationExpiry DateTime
  insuranceExpiry    DateTime
  isActive           Boolean     @default(true)
  jobs               Job[]
}

model Container {
  id              String          @id @default(cuid())
  containerNumber String          @unique
  type            ContainerType
  size            ContainerSize
  status          ContainerStatus
  notes           String?
  jobs            Job[]
}

model Job {
  id                 String    @id @default(cuid())
  customerId         String
  containerId        String
  driverId           String
  vehicleId          String
  status             JobStatus
  pickupAddress      String
  deliveryAddress    String
  scheduledPickup    DateTime
  scheduledDelivery  DateTime
  actualPickup       DateTime?
  actualDelivery     DateTime?
  freightDescription String
  notes              String?
  createdByUserId    String
  createdAt          DateTime  @default(now())

  customer      Customer  @relation(fields: [customerId], references: [id])
  container     Container @relation(fields: [containerId], references: [id])
  driver        Driver    @relation(fields: [driverId], references: [id])
  vehicle       Vehicle   @relation(fields: [vehicleId], references: [id])
  createdByUser User      @relation("CreatedJobs", fields: [createdByUserId], references: [id])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  role      Role?
  isDriver  Boolean  @default(false)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum Role {
  admin
  dispatcher
}

enum VehicleType {
  Tractor
  Trailer
  Van
  Flatbed
}

enum ContainerType {
  Dry
  Reefer
  OpenTop
}

enum ContainerSize {
  S20ft
  S40ft
  S45ft
}

enum ContainerStatus {
  InYard
  InTransit
  WithCustomer
}

enum JobStatus {
  Booked
  Assigned
  InProgress
  Completed
}
